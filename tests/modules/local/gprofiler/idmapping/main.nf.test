nextflow_process {

    name "Test Process GPROFILER_IDMAPPING"
    script "modules/local/gprofiler/idmapping/main.nf"
    process "GPROFILER_IDMAPPING"
    tag "idmapping"
    tag "module"

    test("Map Ensembl IDs to themselves") {

        when {
            process {
                """
                meta = []
                count_file = file("$projectDir/tests/test_data/idmapping/base/counts.ensembl_ids.csv", checkIfExists: true)
                input[0] = [meta, count_file, "Solanum tuberosum"]
                input[1] = ''
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }

    test("Map NCBI IDs") {

        when {
            process {
                """
                meta = []
                count_file = file("$projectDir/tests/test_data/idmapping/base/counts.ncbi_ids.csv", checkIfExists: true)
                input[0] = [meta, count_file, "Arabidopsis thaliana"]
                input[1] = ''
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }


    test("Map Uniprot IDs") {

        when {
            process {
                """
                meta = []
                count_file = file("$projectDir/tests/test_data/idmapping/base/counts.uniprot_ids.csv", checkIfExists: true)
                input[0] = [meta, count_file, "Arabidopsis thaliana"]
                input[1] = ''
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }

    test("Empty count file - ignore error") {

        tag "idmapping_empty"

        when {
            process {
                """
                meta = []
                count_file = file("$projectDir/tests/test_data/idmapping/empty/counts.csv", checkIfExists: true)
                input[0] = [meta, count_file, "Arabidopsis thaliana"]
                input[1] = ''
                """
            }
        }

        then {
            assert process.success
            assert process.trace.succeeded().size() == 0
            assert process.trace.failed().size() == 1
            // check for the absence of expected output (the error is ignored but no output is produced)
            assert process.out.renamed.size() == 0
            assert process.out.metadata.size() == 0
            assert process.out.mapping.size() == 0
        }

    }

    test("Mapping not found - ignore error") {

        tag "idmapping_not_found"

        when {
            process {
                """
                meta = []
                count_file = file("$projectDir/tests/test_data/idmapping/not_found/counts.csv", checkIfExists: true)
                input[0] = [meta, count_file, "Homo sapiens"]
                input[1] = ''
                """
            }
        }

        then {
            assert process.success
            assert process.trace.succeeded().size() == 0
            assert process.trace.failed().size() == 1
            // check for the absence of expected output (the error is ignored but no output is produced)
            assert process.out.renamed.size() == 0
            assert process.out.metadata.size() == 0
            assert process.out.mapping.size() == 0
        }

    }

    test("Custom mapping") {

        tag "custom_mapping"

        when {
            process {
                """
                meta = []
                count_file = file("$projectDir/tests/test_data/idmapping/base/counts.ensembl_ids.csv", checkIfExists: true)
                custom_mapping_file = file("$projectDir/tests/test_data/idmapping/custom/mapping.csv", checkIfExists: true)
                input[0] = [meta, count_file, "Solanum tuberosum"]
                input[1] = custom_mapping_file
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }

}
